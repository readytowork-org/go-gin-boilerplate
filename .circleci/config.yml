version: 2.1
# this is general circleCI implementation.
# This file might need some changes after setting up project for functional CICD
jobs:
  build:
    docker:
      - image: cimg/go:1.18
      - image: cimg/mysql:8.0
        environment:
          MYSQL_DATABASE: backend_db
          MYSQL_USER: backend_user
          MYSQL_PASSWORD: p@ssw0rd

    parallelism: 1
    resource_class: small

    steps:
      - checkout

      - run:
          name: Append GAR beta settings app yml
          command: |
            echo -e "beta_settings:\n  cloud_sql_instances: $DB_HOST" >> app.yaml

      - run:
          name: Initialize the environment variable file
          command: |
            echo "
            ServerPort=8080
            ENVIRONMENT=$ENVIRONMENT
            DB_HOST=$DB_HOST
            DB_PORT=$DB_PORT
            DB_NAME=$DB_NAME 
            DB_USERNAME=$DB_USERNAME
            DB_PASSWORD=$DB_PASSWORD
            MAIL_CLIENT_ID=$MAIL_CLIENT_ID
            MAIL_CLIENT_SECRET=$MAIL_CLIENT_SECRET
            MAIL_TOKEN_TYPE=$MAIL_TOKEN_TYPE
            STORAGE_BUCKET_NAME=$STORAGE_BUCKET_NAME
            SENTRY_DSN=$SENTRY_DSN " > .env

      - run:
          name: Initialize firebase service account key file
          command: |
            echo "{
              \"type\": \"$TYPE_SERVICE_ACCOUNT_KEY\", 
              \"project_id\": \"$PROJECT_ID_SERVICE_ACCOUNT_KEY\", 
              \"private_key_id\": \"$PRIVATE_KEY_ID_SERVICE_ACCOUNT_KEY\",
              \"private_key\": \"$PRIVATE_KEY_SERVICE_ACCOUNT_KEY\",
              \"client_email\": \"$CLIENT_EMAIL_SERVICE_ACCOUNT_KEY\",
              \"client_id\": \"$CLIENT_ID_SERVICE_ACCOUNT_KEY\",
              \"auth_uri\": \"$AUTH_URL_SERVICE_ACCOUNT_KEY\",
              \"token_uri\": \"$TOKEN_URI_SERVICE_ACCOUNT_KEY\",
              \"auth_provider_x509_cert_url\": \"$AUTH_PROVIDER_X509_CERT_URL_SERVICE_ACCOUNT_KEY\",
              \"client_x509_cert_url\": \"$CLIENT_X509_CERT_URL_SERVICE_ACCOUNT_KEY\"
            }" > serviceAccountKey.json

      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}

      - run:
          name: Waiting for MYSQL to be ready
          command: |
            for i in `seq 1 30`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1

      - run:
          name: Build repo
          command: |
            go build main.go

      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "go/pkg/mod"

      - run:
          name: Start the service
          command: ./main
          background: true

      - run:
          name: Validate if the service is working or not.
          command: |
            sleep 5
            curl http://localhost:8080/health-check

  deploy_to_develop:
    docker:
      - image: google/cloud-sdk
    
    resource_class: small

    steps:
      - checkout

      - run:
          name: Append GAR beta settings app yml
          command: |
            echo -e "beta_settings:\n  cloud_sql_instances: $DB_HOST" >> app.yaml

      - run:
          name: Initialize the environment variable file
          command: |
            echo "
            ServerPort=8080
            ENVIRONMENT=$ENVIRONMENT
            DB_HOST=$DB_LocalHost
            DB_PORT=$DB_Port
            DBName=$DB_Name 
            DBUsername=$DB_User
            DBPassword=$DB_Pass
            MailClientID=$MailClientID
            MailClientSecret=$MailClientSecret
            MailTokenType=$MailTokenType
            MailAccesstoken=$MailAccesstoken
            MailRefreshToken=$MailRefreshToken
            StorageBucketName=$StorageBucketName
            SENTRY_DSN=$SENTRY_DSN " > .env

      - run:
          name: Initialize firebase service account key file
          command: |
            echo "{
              \"type\": \"$TYPE_SERVICE_ACCOUNT_KEY\", 
              \"project_id\": \"$PROJECT_ID_SERVICE_ACCOUNT_KEY\", 
              \"private_key_id\": \"$PRIVATE_KEY_ID_SERVICE_ACCOUNT_KEY\",
              \"private_key\": \"$PRIVATE_KEY_SERVICE_ACCOUNT_KEY\",
              \"client_email\": \"$CLIENT_EMAIL_SERVICE_ACCOUNT_KEY\",
              \"client_id\": \"$CLIENT_ID_SERVICE_ACCOUNT_KEY\",
              \"auth_uri\": \"$AUTH_URL_SERVICE_ACCOUNT_KEY\",
              \"token_uri\": \"$TOKEN_URI_SERVICE_ACCOUNT_KEY\",
              \"auth_provider_x509_cert_url\": \"$AUTH_PROVIDER_X509_CERT_URL_SERVICE_ACCOUNT_KEY\",
              \"client_x509_cert_url\": \"$CLIENT_X509_CERT_URL_SERVICE_ACCOUNT_KEY\"
            }" > serviceAccountKey.json

      - run:
          name: Authenticating and configuring the Google Cloud Platform
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GCLOUD_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GCLOUD_ZONE}

      - deploy:
          name: Deploy to Google App Engine
          command: |
            gcloud app deploy app.yaml --project $GCLOUD_PROJECT_ID  --quiet

      - run:
          name: Delete Old versions of App Engine
          command: |
            versions=$(gcloud app versions list \
              --service default \
              --sort-by '~VERSION.ID' \
              --format 'value(VERSION.ID)' | sed 1,5d)
            for version in $versions; do
              gcloud app versions delete "$version" \
                --service default \
                --quiet
            done

workflows:
  version: 2
  workflow:
    jobs:
      - build:
          context: backend-rnd
          filters:
            branches:
              only:
                - deploy-backend

      - deploy_to_develop:
          context: backend-rnd
          filters:
            branches:
              only:
                - deploy-backend
          requires:
            - build